{
    "name": "C/C++ Development",
    "build": {
        "dockerfile": "Dockerfile",
        "context": ".."
    },
    // Set *default* container specific settings.json values
    "customizations": {
        "vscode": {
            "settings": {
                "terminal.integrated.defaultProfile.linux": "bash",
                "terminal.integrated.profiles.linux": {
                    "bash": {
                        "path": "/bin/bash"
                    }
                },
                // C/C++ IntelliSense settings
                "C_Cpp.default.includePath": [
                    "${workspaceFolder}/**",
                    "/usr/include",
                    "/usr/local/include"
                ],
                "C_Cpp.default.compilerPath": "/usr/bin/gcc",
                "C_Cpp.default.cStandard": "c11",
                "C_Cpp.default.cppStandard": "c++17",
                "C_Cpp.default.intelliSenseMode": "linux-gcc-x64",
                "C_Cpp.intelliSenseEngine": "default",
                "C_Cpp.enhancedColorization": "enabled",
                "editor.formatOnSave": true,
                "editor.formatOnType": true,
                "files.exclude": {
                    "**/.git": true,
                    "**/.svn": true,
                    "**/.hg": true,
                    "**/CVS": true,
                    "**/.DS_Store": true,
                    "**/Thumbs.db": true,
                    "**/node_modules": true,
                    "**/*.o": true,
                    "**/*.obj": true,
                    "**/*.ilk": true,
                    "**/*.pdb": true
                },
                "files.associations": {
                    "*.h": "c",
                    "*.c": "c",
                    "*.hpp": "cpp",
                    "*.cpp": "cpp"
                }
            },
            // Add extensions for C/C++ development
            "extensions": [
                "ms-vscode.cpptools-extension-pack",
                "ms-vscode.cmake-tools",
                "xaver.clang-format",
                "twxs.cmake",
                "cschlosser.doxdocgen"
            ]
        }
    },
    // Explicitly specify how the workspace should be mounted into the container
    // This ensures the host directory is perfectly synchronized with the container
    "workspaceMount": "source=${localWorkspaceFolder},target=/workspaces/project,type=bind,consistency=cached",
    "workspaceFolder": "/workspaces/project",

    // Use 'forwardPorts' to make a list of ports inside the container available locally.
    "forwardPorts": [],
    
    // Use 'postCreateCommand' to run commands after the container is created.
    // "postCreateCommand": "gcc -v",
    
    // Uncomment when using a ptrace-based debugger like C++, Go, and Rust
    "runArgs": [
        "--cap-add=SYS_PTRACE",
        "--security-opt",
        "seccomp=unconfined"
    ],
    
    // Set `remoteUser` to `root` to connect as root instead.
    "remoteUser": "root"
}